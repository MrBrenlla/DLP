true
let x = true in x
if false then true else false
0
succ (succ (succ 0))
3
succ (pred 0)
iszero (pred (succ (succ 0)))
if iszero 3 then 0 else 1
iszero true
if 1 then true else false
if iszero 3 then 0 else false
let id = Lx.x in id 3
let id_bool = L x:Bool. x in id_bool true
let id_nat = L x:Nat. x in id_nat 5
let x = 5 in let id_nat = L x:Nat. x in id_nat x
let fix = lambda f.(lambda x. f (lambda y. x x y)) (lambda x. f (lambda y. x x y)) in let sumaux = lambda f. (lambda n. (lambda m. if (iszero n) then m else succ (f (pred n) m))) in let sum = fix sumaux in sum 21 34
let fix = lambda f.(lambda x. f (lambda y. x x y)) (lambda x. f (lambda y. x x y)) in let sumaux = lambda f. (lambda n. (lambda m. if (iszero n) then m else succ (f (pred n) m))) in let sum = fix sumaux in let prodaux = lambda f. (lambda n. (lambda m. if (iszero (pred n)) then m else sum (f (pred n) m) m)) in let prod = fix prodaux in prod 12 5


 sum 21 34;;

letrec zero : Nat -> Nat = lambda n : Nat. if iszero n then n else (zero (pred n)) in zero 100;;

fib = letrec sum : Nat -> Nat -> Nat = lambda n : Nat. lambda m : Nat. if iszero n then m else succ ((sum (pred n)) m) in
(letrec fib: Nat-> Nat = Ln:Nat. if (iszero n) then (0) else (if (iszero (pred n)) then 1 else ((sum (fib (pred(n)))) (fib (pred(pred(n)))))) in Lx:Nat.fib x);;

mult = letrec sum : Nat -> Nat -> Nat = lambda n : Nat. lambda m : Nat. if iszero n then m else succ ((sum (pred n)) m) in
letrec mult : Nat -> Nat -> Nat = lambda n: Nat. lambda m:Nat. if iszero n then 0 else (sum m) ((mult (pred n)) m) in Lx:Nat.Ly:Nat.(mult x) y;;


sum = letrec auxsum : Nat -> Nat -> Nat =
lambda n : Nat. lambda m : Nat. if (iszero n) then (m) else (succ ((auxsum (pred n)) m)) in
L x:Nat. L y:Nat. (auxsum x) y;;



length = letrec auxlength : (Nat List) -> Nat = L l:Nat List. if (isempty l) then 0 else (sum 1) (auxlength (tail l))
in auxlength;;

length [1,2,3,4,5,6]:Nat;;


map = letrec auxmap: (Nat -> Nat) -> (Nat List) -> (Nat List) = L f: Nat -> Nat.L l:Nat List. if (isempty l) then (l) else ((f (head l))::((auxmap f)(tail l))) in
L f:Nat -> Nat. L lista: Nat List. (auxmap f) lista;;

(map (sum 1))[1,2,3,4]:Nat;;
