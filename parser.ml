type token =
  | LAMBDA
  | TRUE
  | FALSE
  | IF
  | THEN
  | ELSE
  | SUCC
  | PRED
  | ISZERO
  | CONCAT
  | LET
  | LETREC
  | IN
  | LIST
  | HEAD
  | TAIL
  | ISEMPTY
  | PROJECT
  | BOOL
  | NAT
  | STR
  | FST
  | SCN
  | LPAREN
  | RPAREN
  | LCORCH
  | RCORCH
  | LBRAC
  | RBRAC
  | COMA
  | DOT
  | EQ
  | AST
  | COLON
  | ARROW
  | EOF
  | INTV of (int)
  | STRINGV of (string)
  | STRING of (string)

open Parsing;;
let _ = parse_error;;
# 3 "parser.mly"
  open Lambda;;
# 47 "parser.ml"
let yytransl_const = [|
  257 (* LAMBDA *);
  258 (* TRUE *);
  259 (* FALSE *);
  260 (* IF *);
  261 (* THEN *);
  262 (* ELSE *);
  263 (* SUCC *);
  264 (* PRED *);
  265 (* ISZERO *);
  266 (* CONCAT *);
  267 (* LET *);
  268 (* LETREC *);
  269 (* IN *);
  270 (* LIST *);
  271 (* HEAD *);
  272 (* TAIL *);
  273 (* ISEMPTY *);
  274 (* PROJECT *);
  275 (* BOOL *);
  276 (* NAT *);
  277 (* STR *);
  278 (* FST *);
  279 (* SCN *);
  280 (* LPAREN *);
  281 (* RPAREN *);
  282 (* LCORCH *);
  283 (* RCORCH *);
  284 (* LBRAC *);
  285 (* RBRAC *);
  286 (* COMA *);
  287 (* DOT *);
  288 (* EQ *);
  289 (* AST *);
  290 (* COLON *);
  291 (* ARROW *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  292 (* INTV *);
  293 (* STRINGV *);
  294 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\006\000\
\006\000\007\000\007\000\004\000\004\000\004\000\004\000\004\000\
\004\000\009\000\009\000\008\000\008\000\008\000\008\000\000\000"

let yylen = "\002\000\
\002\000\004\000\001\000\006\000\006\000\006\000\008\000\001\000\
\002\000\002\000\002\000\002\000\002\000\003\000\002\000\002\000\
\002\000\002\000\003\000\003\000\005\000\004\000\003\000\004\000\
\002\000\005\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\005\000\001\000\001\000\003\000\003\000\002\000\002\000\
\005\000\005\000\001\000\003\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\027\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\030\000\000\000\031\000\
\048\000\000\000\000\000\008\000\000\000\029\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\
\023\000\000\000\000\000\000\000\045\000\046\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\000\000\000\000\000\040\000\000\000\
\039\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\
\000\000\032\000\035\000\000\000\026\000\044\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\000\000\000\041\000\000\000\000\000\000\000\034\000\
\000\000\000\000\042\000"

let yydgoto = "\002\000\
\025\000\032\000\027\000\074\000\028\000\065\000\101\000\075\000\
\116\000"

let yysindex = "\007\000\
\156\255\000\000\231\254\000\000\000\000\194\255\194\255\194\255\
\194\255\194\255\234\254\240\254\194\255\194\255\194\255\006\255\
\194\255\194\255\194\255\118\255\013\255\000\000\030\255\000\000\
\000\000\002\000\194\255\000\000\012\255\000\000\251\254\035\255\
\000\000\000\000\000\000\194\255\046\255\048\255\000\000\000\000\
\000\000\194\255\000\000\000\000\244\254\053\255\037\255\000\000\
\057\255\194\255\054\255\000\000\000\000\032\255\194\255\000\000\
\194\255\032\255\000\000\000\000\194\255\032\255\058\255\194\255\
\000\000\194\255\019\000\194\255\000\000\000\000\000\000\032\255\
\026\255\000\255\010\255\254\254\249\254\002\255\242\254\014\255\
\032\255\037\255\056\255\000\000\035\255\024\255\000\000\061\255\
\000\000\194\255\032\255\032\255\194\255\194\255\194\255\000\000\
\014\255\000\000\000\000\021\255\000\000\000\000\032\255\035\255\
\014\255\014\255\035\255\035\255\252\254\059\255\011\255\194\255\
\194\255\000\000\063\255\000\000\035\255\056\255\062\255\000\000\
\032\255\011\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\048\003\000\000\
\000\000\000\000\086\003\000\000\000\000\000\000\000\000\000\000\
\115\000\153\000\191\000\067\255\000\000\000\000\229\000\020\001\
\058\001\000\000\096\001\134\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\172\001\000\000\000\000\210\001\
\000\000\000\000\248\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\034\002\
\000\000\000\000\000\000\000\000\110\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\072\002\000\000\000\000\000\000\000\000\000\000\000\000\148\002\
\039\000\077\000\186\002\224\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\006\003\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\004\000\000\000\201\255\066\000\021\000\242\255\000\000\
\239\255"

let yytablesize = 1144
let yytable = "\055\000\
\036\000\052\000\078\000\093\000\026\000\094\000\080\000\001\000\
\112\000\031\000\096\000\029\000\060\000\089\000\037\000\089\000\
\086\000\061\000\084\000\051\000\038\000\051\000\045\000\047\000\
\089\000\097\000\051\000\089\000\051\000\051\000\090\000\051\000\
\091\000\095\000\091\000\105\000\106\000\089\000\038\000\114\000\
\115\000\048\000\042\000\091\000\092\000\054\000\091\000\111\000\
\102\000\049\000\069\000\070\000\071\000\067\000\087\000\072\000\
\091\000\110\000\076\000\073\000\077\000\050\000\088\000\063\000\
\079\000\122\000\064\000\082\000\051\000\083\000\051\000\085\000\
\033\000\034\000\035\000\036\000\037\000\057\000\039\000\040\000\
\041\000\058\000\043\000\044\000\099\000\100\000\062\000\068\000\
\066\000\051\000\113\000\081\000\053\000\104\000\103\000\121\000\
\107\000\108\000\109\000\119\000\008\000\056\000\098\000\120\000\
\123\000\000\000\000\000\059\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\000\117\000\118\000\000\000\003\000\004\000\
\005\000\006\000\000\000\000\000\007\000\008\000\009\000\010\000\
\011\000\012\000\000\000\000\000\013\000\014\000\015\000\016\000\
\000\000\000\000\000\000\017\000\018\000\019\000\000\000\020\000\
\046\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\022\000\030\000\024\000\003\000\004\000\005\000\006\000\
\000\000\000\000\007\000\008\000\009\000\010\000\011\000\012\000\
\000\000\000\000\013\000\014\000\015\000\016\000\000\000\000\000\
\000\000\017\000\018\000\019\000\000\000\020\000\000\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\013\000\022\000\
\023\000\024\000\003\000\004\000\005\000\006\000\000\000\000\000\
\007\000\008\000\009\000\010\000\011\000\012\000\000\000\000\000\
\013\000\014\000\015\000\016\000\000\000\000\000\000\000\017\000\
\018\000\019\000\000\000\020\000\000\000\021\000\000\000\000\000\
\000\000\000\000\000\000\000\000\016\000\022\000\030\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\015\000\000\000\000\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\051\000\036\000\036\000\036\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\051\000\038\000\038\000\038\000\
\038\000\017\000\000\000\000\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\000\000\
\038\000\000\000\038\000\038\000\038\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\000\000\037\000\037\000\037\000\037\000\010\000\
\000\000\000\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\000\000\037\000\000\000\
\037\000\037\000\037\000\008\000\008\000\008\000\008\000\009\000\
\009\000\008\000\008\000\008\000\008\000\008\000\008\000\009\000\
\000\000\008\000\008\000\008\000\008\000\011\000\000\000\000\000\
\008\000\008\000\008\000\009\000\008\000\009\000\008\000\009\000\
\009\000\000\000\000\000\000\000\008\000\000\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\012\000\012\000\008\000\
\008\000\008\000\008\000\008\000\008\000\012\000\000\000\008\000\
\008\000\008\000\008\000\018\000\000\000\000\000\008\000\008\000\
\008\000\012\000\008\000\012\000\008\000\012\000\012\000\000\000\
\000\000\000\000\008\000\000\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\013\000\013\000\008\000\008\000\008\000\
\008\000\008\000\008\000\013\000\000\000\008\000\008\000\008\000\
\008\000\014\000\000\000\000\000\008\000\008\000\008\000\013\000\
\008\000\013\000\008\000\013\000\013\000\000\000\000\000\000\000\
\008\000\000\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\016\000\016\000\008\000\008\000\008\000\008\000\008\000\
\008\000\016\000\000\000\008\000\008\000\008\000\008\000\019\000\
\000\000\000\000\008\000\008\000\008\000\016\000\008\000\016\000\
\008\000\016\000\016\000\000\000\000\000\000\000\008\000\000\000\
\008\000\008\000\008\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\000\008\000\008\000\008\000\
\015\000\015\000\008\000\008\000\008\000\008\000\008\000\008\000\
\015\000\022\000\008\000\008\000\008\000\008\000\000\000\000\000\
\000\000\008\000\008\000\008\000\015\000\008\000\015\000\008\000\
\015\000\015\000\000\000\000\000\000\000\008\000\000\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\017\000\017\000\
\008\000\008\000\008\000\008\000\008\000\008\000\017\000\033\000\
\008\000\008\000\008\000\008\000\000\000\000\000\000\000\008\000\
\008\000\008\000\017\000\008\000\017\000\008\000\017\000\017\000\
\000\000\000\000\000\000\008\000\000\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\010\000\010\000\008\000\008\000\
\008\000\008\000\008\000\008\000\010\000\024\000\008\000\008\000\
\008\000\008\000\000\000\000\000\000\000\008\000\008\000\008\000\
\010\000\008\000\010\000\008\000\010\000\010\000\000\000\000\000\
\000\000\008\000\000\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\011\000\011\000\008\000\008\000\008\000\008\000\
\008\000\008\000\011\000\005\000\008\000\008\000\008\000\008\000\
\000\000\000\000\000\000\008\000\008\000\008\000\011\000\008\000\
\011\000\008\000\011\000\011\000\000\000\000\000\000\000\008\000\
\000\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\018\000\018\000\008\000\008\000\008\000\008\000\008\000\008\000\
\018\000\004\000\008\000\008\000\008\000\008\000\000\000\000\000\
\000\000\008\000\008\000\008\000\018\000\008\000\018\000\008\000\
\018\000\018\000\000\000\000\000\000\000\008\000\000\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\014\000\014\000\
\008\000\008\000\008\000\008\000\008\000\008\000\014\000\006\000\
\008\000\008\000\008\000\008\000\000\000\000\000\000\000\008\000\
\008\000\008\000\014\000\008\000\014\000\008\000\014\000\014\000\
\000\000\000\000\000\000\008\000\000\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\019\000\019\000\008\000\008\000\
\008\000\008\000\008\000\008\000\019\000\007\000\008\000\008\000\
\008\000\008\000\000\000\000\000\000\000\008\000\008\000\008\000\
\019\000\008\000\019\000\008\000\019\000\019\000\000\000\000\000\
\000\000\008\000\000\000\008\000\008\000\008\000\000\000\000\000\
\000\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\029\000\
\022\000\022\000\022\000\022\000\000\000\000\000\000\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\000\000\000\000\000\000\022\000\000\000\022\000\022\000\022\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\003\000\033\000\033\000\
\033\000\033\000\000\000\000\000\000\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\000\000\000\000\
\000\000\033\000\000\000\033\000\033\000\033\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\000\000\024\000\024\000\024\000\024\000\
\000\000\000\000\000\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\000\000\000\000\000\000\000\000\
\000\000\024\000\024\000\024\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\000\000\005\000\005\000\005\000\005\000\000\000\000\000\
\000\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\000\000\000\000\000\000\000\000\000\000\005\000\
\005\000\005\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000\
\004\000\004\000\004\000\004\000\000\000\000\000\000\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\000\000\000\000\000\000\000\000\000\000\004\000\004\000\004\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\000\000\006\000\006\000\
\006\000\006\000\000\000\000\000\000\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\000\000\000\000\
\000\000\000\000\000\000\006\000\006\000\006\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\000\000\007\000\007\000\007\000\007\000\
\000\000\000\000\000\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\000\000\000\000\000\000\000\000\
\000\000\007\000\007\000\007\000\000\000\000\000\000\000\000\000\
\029\000\029\000\029\000\029\000\000\000\000\000\029\000\029\000\
\029\000\029\000\029\000\029\000\000\000\000\000\029\000\029\000\
\029\000\029\000\000\000\000\000\000\000\029\000\029\000\029\000\
\000\000\029\000\000\000\029\000\000\000\000\000\000\000\000\000\
\000\000\029\000\000\000\029\000\029\000\029\000\000\000\000\000\
\000\000\000\000\003\000\003\000\000\000\000\000\000\000\000\000\
\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\
\003\000\000\000\003\000\003\000\000\000\000\000\000\000\003\000"

let yycheck = "\005\001\
\000\000\000\000\058\000\006\001\001\000\013\001\062\000\001\000\
\013\001\006\000\025\001\037\001\025\001\014\001\037\001\014\001\
\072\000\030\001\000\000\034\001\037\001\034\001\019\000\020\000\
\014\001\081\000\034\001\014\001\034\001\034\001\031\001\034\001\
\033\001\032\001\033\001\091\000\092\000\014\001\000\000\029\001\
\030\001\029\001\037\001\033\001\035\001\034\001\033\001\103\000\
\025\001\037\001\019\001\020\001\021\001\050\000\029\001\024\001\
\033\001\037\001\055\000\028\001\057\000\032\001\037\001\027\001\
\061\000\121\000\030\001\064\000\034\001\066\000\034\001\068\000\
\007\000\008\000\009\000\010\000\000\000\032\001\013\000\014\000\
\015\000\034\001\017\000\018\000\029\001\030\001\034\001\034\001\
\032\001\034\001\032\001\034\001\027\000\090\000\034\001\034\001\
\093\000\094\000\095\000\037\001\034\001\036\000\082\000\118\000\
\122\000\255\255\255\255\042\000\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\112\000\113\000\255\255\001\001\002\001\
\003\001\004\001\255\255\255\255\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\022\001\023\001\024\001\255\255\026\001\
\027\001\028\001\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\036\001\037\001\038\001\001\001\002\001\003\001\004\001\
\255\255\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\022\001\023\001\024\001\255\255\026\001\255\255\028\001\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\036\001\
\037\001\038\001\001\001\002\001\003\001\004\001\255\255\255\255\
\007\001\008\001\009\001\010\001\011\001\012\001\255\255\255\255\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\022\001\
\023\001\024\001\255\255\026\001\255\255\028\001\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\036\001\037\001\038\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\034\001\036\001\037\001\038\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\034\001\015\001\016\001\017\001\
\018\001\000\000\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\255\255\
\034\001\255\255\036\001\037\001\038\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\015\001\016\001\017\001\018\001\000\000\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\255\255\034\001\255\255\
\036\001\037\001\038\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\255\255\015\001\016\001\017\001\018\001\000\000\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\255\255\255\255\255\255\034\001\255\255\036\001\037\001\
\038\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\015\001\
\016\001\017\001\018\001\000\000\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\255\255\255\255\034\001\255\255\036\001\037\001\038\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\255\255\015\001\016\001\017\001\
\018\001\000\000\255\255\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\255\255\255\255\255\255\
\034\001\255\255\036\001\037\001\038\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\015\001\016\001\017\001\018\001\000\000\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\255\255\255\255\255\255\034\001\255\255\
\036\001\037\001\038\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\000\000\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\255\255\255\255\255\255\034\001\255\255\036\001\
\037\001\038\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\000\000\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\255\255\034\001\255\255\036\001\037\001\038\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\000\000\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\255\255\034\001\255\255\036\001\037\001\038\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\000\000\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\255\255\255\255\034\001\
\255\255\036\001\037\001\038\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\000\000\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\255\255\255\255\255\255\034\001\255\255\036\001\
\037\001\038\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\000\000\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\255\255\034\001\255\255\036\001\037\001\038\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\000\000\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\255\255\034\001\255\255\036\001\037\001\038\001\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\000\000\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\255\255\034\001\255\255\036\001\037\001\038\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\000\000\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\255\255\034\001\255\255\036\001\037\001\038\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\036\001\037\001\038\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\255\255\015\001\016\001\017\001\018\001\255\255\255\255\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\255\255\255\255\255\255\255\255\255\255\036\001\
\037\001\038\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\255\255\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\036\001\037\001\038\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\255\255\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\255\255\255\255\255\255\036\001\037\001\038\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\255\255\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\036\001\037\001\038\001\255\255\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\255\255\255\255\007\001\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\022\001\023\001\024\001\
\255\255\026\001\255\255\028\001\255\255\255\255\255\255\255\255\
\255\255\034\001\255\255\036\001\037\001\038\001\255\255\255\255\
\255\255\255\255\005\001\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\013\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\025\001\255\255\
\027\001\255\255\029\001\030\001\255\255\255\255\255\255\034\001"

let yynames_const = "\
  LAMBDA\000\
  TRUE\000\
  FALSE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  SUCC\000\
  PRED\000\
  ISZERO\000\
  CONCAT\000\
  LET\000\
  LETREC\000\
  IN\000\
  LIST\000\
  HEAD\000\
  TAIL\000\
  ISEMPTY\000\
  PROJECT\000\
  BOOL\000\
  NAT\000\
  STR\000\
  FST\000\
  SCN\000\
  LPAREN\000\
  RPAREN\000\
  LCORCH\000\
  RCORCH\000\
  LBRAC\000\
  RBRAC\000\
  COMA\000\
  DOT\000\
  EQ\000\
  AST\000\
  COLON\000\
  ARROW\000\
  EOF\000\
  "

let yynames_block = "\
  INTV\000\
  STRINGV\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 55 "parser.mly"
      ( VarValue _1 )
# 514 "parser.ml"
               : Lambda.variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 57 "parser.mly"
      (VarAsignation (_1,_3))
# 522 "parser.ml"
               : Lambda.variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'appTerm) in
    Obj.repr(
# 61 "parser.mly"
      ( _1 )
# 529 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 63 "parser.mly"
      ( TmIf (_2, _4, _6) )
# 538 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 65 "parser.mly"
      ( TmAbs (_2, _4, _6) )
# 547 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 67 "parser.mly"
      ( TmLetIn (_2, _4, _6) )
# 556 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ty) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 69 "parser.mly"
      (TmLetIn (_2, TmFix(TmAbs(_2,_4,_6)),_8) )
# 566 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 74 "parser.mly"
      ( _1 )
# 573 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 76 "parser.mly"
      ( TmSucc _2 )
# 580 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 78 "parser.mly"
      ( TmFirst _2)
# 587 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 80 "parser.mly"
      (TmSecond _2)
# 594 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 82 "parser.mly"
      ( TmPred _2 )
# 601 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 84 "parser.mly"
      ( TmIsZero _2 )
# 608 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'atomicTerm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 86 "parser.mly"
      ( TmConcat (_2,_3))
# 616 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 88 "parser.mly"
      ( TmTail _2)
# 623 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 90 "parser.mly"
      ( TmHead _2)
# 630 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 92 "parser.mly"
      ( TmIsEmpty _2)
# 637 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'appTerm) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 94 "parser.mly"
      ( TmApp (_1, _2) )
# 645 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTerm) in
    Obj.repr(
# 96 "parser.mly"
      ( TmProject (_2,_3) )
# 653 "parser.ml"
               : 'appTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 100 "parser.mly"
      ( _2 )
# 660 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 102 "parser.mly"
      ( TmPair(_2,_4) )
# 668 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 104 "parser.mly"
      ( TmEmptyList _4 )
# 675 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lista) in
    Obj.repr(
# 106 "parser.mly"
      ( TmList (_2,_3) )
# 683 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 108 "parser.mly"
      ( TmList (_1,_4) )
# 691 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 110 "parser.mly"
      ( TmRec [] )
# 697 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'reg) in
    Obj.repr(
# 112 "parser.mly"
      ( TmRec ((_2,_4)::_5) )
# 706 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
      ( TmTrue )
# 712 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "parser.mly"
      ( TmFalse )
# 718 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 118 "parser.mly"
      ( TmVar _1 )
# 725 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 120 "parser.mly"
      ( let rec f = function
            0 -> TmZero
          | n -> TmSucc (f (n-1))
        in f _1 )
# 735 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 125 "parser.mly"
      ( TmString _1)
# 742 "parser.ml"
               : 'atomicTerm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lista) in
    Obj.repr(
# 129 "parser.mly"
      (TmList (_2,_3))
# 750 "parser.ml"
               : 'lista))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 131 "parser.mly"
      (TmEmptyList _3)
# 757 "parser.ml"
               : 'lista))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'reg) in
    Obj.repr(
# 135 "parser.mly"
      ((_2,_4)::_5)
# 766 "parser.ml"
               : 'reg))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "parser.mly"
      ([])
# 772 "parser.ml"
               : 'reg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomicTy) in
    Obj.repr(
# 141 "parser.mly"
      ( _1 )
# 779 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'atomicTy) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 143 "parser.mly"
      ( TyArr (_1, _3) )
# 787 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ty) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
    Obj.repr(
# 145 "parser.mly"
      ( TyPair (_1,_3))
# 795 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 147 "parser.mly"
      ( TyList _1)
# 802 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    Obj.repr(
# 149 "parser.mly"
      ( TyRec [] )
# 808 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'tyreg) in
    Obj.repr(
# 151 "parser.mly"
      ( TyRec ((_2,_4)::_5) )
# 817 "parser.ml"
               : 'ty))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'tyreg) in
    Obj.repr(
# 155 "parser.mly"
      ((_2,_4)::_5)
# 826 "parser.ml"
               : 'tyreg))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
      ([])
# 832 "parser.ml"
               : 'tyreg))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ty) in
    Obj.repr(
# 161 "parser.mly"
      ( _2 )
# 839 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "parser.mly"
      ( TyBool )
# 845 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 165 "parser.mly"
      ( TyNat )
# 851 "parser.ml"
               : 'atomicTy))
; (fun __caml_parser_env ->
    Obj.repr(
# 167 "parser.mly"
      ( TyStr )
# 857 "parser.ml"
               : 'atomicTy))
(* Entry s *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let s (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Lambda.variable)
